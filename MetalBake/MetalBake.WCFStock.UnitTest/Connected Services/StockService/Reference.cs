//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MetalBake.WCFStock.UnitTest.StockService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ItemStock", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class ItemStock : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItemIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StockField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemId {
            get {
                return this.ItemIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemIdField, value) != true)) {
                    this.ItemIdField = value;
                    this.RaisePropertyChanged("ItemId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Stock {
            get {
                return this.StockField;
            }
            set {
                if ((this.StockField.Equals(value) != true)) {
                    this.StockField = value;
                    this.RaisePropertyChanged("Stock");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StockService.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllStock", ReplyAction="http://tempuri.org/IService/GetAllStockResponse")]
        MetalBake.WCFStock.UnitTest.StockService.ItemStock[] GetAllStock();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllStock", ReplyAction="http://tempuri.org/IService/GetAllStockResponse")]
        System.Threading.Tasks.Task<MetalBake.WCFStock.UnitTest.StockService.ItemStock[]> GetAllStockAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetItemStock", ReplyAction="http://tempuri.org/IService/GetItemStockResponse")]
        MetalBake.WCFStock.UnitTest.StockService.ItemStock GetItemStock(string itemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetItemStock", ReplyAction="http://tempuri.org/IService/GetItemStockResponse")]
        System.Threading.Tasks.Task<MetalBake.WCFStock.UnitTest.StockService.ItemStock> GetItemStockAsync(string itemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReduceItemStock", ReplyAction="http://tempuri.org/IService/ReduceItemStockResponse")]
        void ReduceItemStock(string itemId, int cuantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReduceItemStock", ReplyAction="http://tempuri.org/IService/ReduceItemStockResponse")]
        System.Threading.Tasks.Task ReduceItemStockAsync(string itemId, int cuantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangeItemStock", ReplyAction="http://tempuri.org/IService/ChangeItemStockResponse")]
        bool ChangeItemStock(string itemId, int cuantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangeItemStock", ReplyAction="http://tempuri.org/IService/ChangeItemStockResponse")]
        System.Threading.Tasks.Task<bool> ChangeItemStockAsync(string itemId, int cuantity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : MetalBake.WCFStock.UnitTest.StockService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<MetalBake.WCFStock.UnitTest.StockService.IService>, MetalBake.WCFStock.UnitTest.StockService.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MetalBake.WCFStock.UnitTest.StockService.ItemStock[] GetAllStock() {
            return base.Channel.GetAllStock();
        }
        
        public System.Threading.Tasks.Task<MetalBake.WCFStock.UnitTest.StockService.ItemStock[]> GetAllStockAsync() {
            return base.Channel.GetAllStockAsync();
        }
        
        public MetalBake.WCFStock.UnitTest.StockService.ItemStock GetItemStock(string itemId) {
            return base.Channel.GetItemStock(itemId);
        }
        
        public System.Threading.Tasks.Task<MetalBake.WCFStock.UnitTest.StockService.ItemStock> GetItemStockAsync(string itemId) {
            return base.Channel.GetItemStockAsync(itemId);
        }
        
        public void ReduceItemStock(string itemId, int cuantity) {
            base.Channel.ReduceItemStock(itemId, cuantity);
        }
        
        public System.Threading.Tasks.Task ReduceItemStockAsync(string itemId, int cuantity) {
            return base.Channel.ReduceItemStockAsync(itemId, cuantity);
        }
        
        public bool ChangeItemStock(string itemId, int cuantity) {
            return base.Channel.ChangeItemStock(itemId, cuantity);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeItemStockAsync(string itemId, int cuantity) {
            return base.Channel.ChangeItemStockAsync(itemId, cuantity);
        }
    }
}
